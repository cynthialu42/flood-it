{"version":3,"sources":["components/Tile.js","components/Grid.js","components/ColorButtons.js","constants/colorThemes.js","components/Settings.js","components/Sidedrawer.js","containers/GameContainer.js","App.js","serviceWorker.js","index.js"],"names":["Tile","props","state","color","tileData","crow","this","spinning","colorCluster","length","size","className","style","height","width","fontSize","backgroundColor","Component","Grid","findAllTiles","array","gridObjectClone","originalArray","tempArr","map","tileNum","top","bottom","left","right","console","log","includes","push","Set","noDuplicates","newFullArray","colors","gridColors","updateGrid","bind","generateGridData","prevProps","currentColor","refresh","setState","tileColorsUpdated","JSON","parse","stringify","gridArrayClone","gridArray","forEach","finalArr","showWin","totalTiles","i","Math","floor","random","gameBoard","tileHeight","tileWidth","splitArray","gridArrayCopy","splice","row","rowTiles","tile","ColorButtons","onClick","sendColor","colorThemes","name","Settings","selectedColorTheme","colorTheme","selectedGridSize","applySettingsChanges","updateGridSize","handleChange","newSize","newTheme","settings","applyNewSettings","closeSidedrawer","e","target","value","themes","theme","colorSwatches","darkMode","type","onKeyPress","min","step","max","onChange","Sidedrawer","isOpen","content","showOverlay","sidedrawerStatus","applyMode","GameContainer","sidedrawerIsOpen","winStats","totalClicks","best","colorClicked","startNewGame","currentSettings","localStorage","getItem","setItem","updateBest","historicBest","bestGame","bestClicks","message","steps","newColorTheme","find","currentStorage","mode","buttonSection","storageBestStatsObj","storageBestStatsArr","historicStats","key","stat","boldFont","parseInt","navBarColor","stats","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","title","Date","getFullYear","tabindex","role","aria-labelledby","aria-hidden","data-dismiss","require","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.25eb59b8.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass Tile extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      color: this.props.tileData.color,\n      crow: false,\n    };\n  }\n  render() {\n    if (this.props.crow) {\n        let spinning = false;\n        if (this.props.colorCluster && this.props.colorCluster.length === this.props.size * this.props.size) {\n            spinning = true;\n        }\n      return (\n        <div\n          className={`tile tile-spin--${spinning}`}\n          style={{ height: this.props.height, width: this.props.width }}\n        >\n          <i\n            className=\"fas fa-crow\"\n            style={{\n              color: this.props.tileData.color,\n              fontSize: this.props.height,\n            }}\n          ></i>\n        </div>\n      );\n    } else {\n      return (\n        <div\n          className=\"tile\"\n          style={{\n            backgroundColor: this.props.tileData.color,\n            height: this.props.height,\n            width: this.props.width,\n          }}\n        ></div>\n      );\n    }\n  }\n}\n\nexport default Tile;\n","import React, { Component } from \"react\";\nimport Tile from \"./Tile\";\n\nclass Grid extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      size: this.props.size,\n      colors: this.props.colors,\n      gridColors: null,\n      colorCluster: null,\n      crow: this.props.crow,\n    };\n    this.updateGrid = this.updateGrid.bind(this);\n  }\n\n  componentDidMount() {\n    this.generateGridData(this.props.size);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.currentColor !== prevProps.currentColor) {\n      this.updateGrid(this.props.currentColor);\n    }\n    if(this.props.colors !== prevProps.colors || this.props.size !== prevProps.size || this.props.refresh) {\n        this.setState({ colorCluster: null, colors: this.props.colors, size: this.props.size })\n        this.generateGridData(this.props.size);\n    }\n  }\n\n  findAllTiles = (array, gridObjectClone, color, originalArray) => {\n    let tempArr = [];\n    array.map((tileNum) => {\n      const { top, bottom, left, right } = gridObjectClone[tileNum];\n      console.log(array.includes(top));\n      if (\n        gridObjectClone[top] &&\n        gridObjectClone[top].color === color &&\n        !array.includes(top) &&\n        !originalArray.includes(top)\n      ) {\n        tempArr.push(top);\n      }\n      if (\n        gridObjectClone[bottom] &&\n        gridObjectClone[bottom].color === color &&\n        !array.includes(bottom) &&\n        !originalArray.includes(bottom)\n      ) {\n        tempArr.push(bottom);\n      }\n      if (\n        gridObjectClone[left] &&\n        gridObjectClone[left].color === color &&\n        !array.includes(left) &&\n        !originalArray.includes(left)\n      ) {\n        tempArr.push(left);\n      }\n      if (\n        gridObjectClone[right] &&\n        gridObjectClone[right].color === color &&\n        !array.includes(right) &&\n        !originalArray.includes(right)\n      ) {\n        tempArr.push(right);\n      }\n    });\n    console.log(\"tempArr\", [...new Set(tempArr)]);\n    const noDuplicates = [...new Set(tempArr)];\n    const newFullArray = [...new Set([...originalArray, ...noDuplicates])];\n    console.log(\"new full array\", newFullArray);\n    if ([...new Set(tempArr)].length) {\n      return this.findAllTiles(\n        noDuplicates,\n        gridObjectClone,\n        color,\n        newFullArray\n      );\n    } else {\n      console.log([...new Set(tempArr)]);\n      return newFullArray;\n    }\n  };\n  updateGrid(color) {\n    let tileColorsUpdated = [];\n    let gridObjectClone = JSON.parse(JSON.stringify(this.state.gridColors));\n    let gridArrayClone = JSON.parse(JSON.stringify(this.state.gridArray));\n    let colorClusterArray;\n    if (this.state.colorCluster) {\n      colorClusterArray = this.state.colorCluster;\n    } else {\n      colorClusterArray = this.findAllTiles(\n        [1],\n        gridObjectClone,\n        gridObjectClone[1].color,\n        [1]\n      );\n    }\n    colorClusterArray.forEach((tileNum) => {\n      const { top, bottom, left, right } = gridObjectClone[tileNum];\n      gridObjectClone[tileNum].color = color;\n      gridArrayClone[tileNum - 1].color = color;\n      tileColorsUpdated.push(tileNum);\n      if (gridObjectClone[top] && gridObjectClone[top].color === color) {\n        tileColorsUpdated.push(top);\n      }\n      if (gridObjectClone[bottom] && gridObjectClone[bottom].color === color) {\n        tileColorsUpdated.push(bottom);\n      }\n      if (gridObjectClone[left] && gridObjectClone[left].color === color) {\n        tileColorsUpdated.push(left);\n      }\n      if (gridObjectClone[right] && gridObjectClone[right].color === color) {\n        tileColorsUpdated.push(right);\n      }\n    });\n    let tempArr = JSON.parse(JSON.stringify(tileColorsUpdated));\n    let finalArr = this.findAllTiles(tempArr, gridObjectClone, color, tempArr);\n    tileColorsUpdated = finalArr;\n    this.setState({\n      colorCluster: [...new Set(tileColorsUpdated)],\n      gridColors: gridObjectClone,\n      gridArray: gridArrayClone,\n    }, () => {\n        if (\n            this.state.colorCluster &&\n            this.state.colorCluster.length === this.props.size * this.props.size\n          ) {\n            this.props.showWin();\n          }\n    });\n    \n  }\n\n  generateGridData(size) {\n    let totalTiles = size * size;\n    let gridColors = {};\n    let gridArray = [];\n    for (let i = 1; i <= totalTiles; i++) {\n      let color = this.props.colors[\n        Math.floor(Math.random() * Math.floor(this.props.colors.length))\n      ];\n      let top = i - size > 0 ? i - size : null;\n      let bottom = i + size < size * size ? i + size : null;\n      let left = i % size === 1 ? null : i - 1;\n      let right = i % size === 0 ? null : i + 1;\n      gridColors[i] = {\n        color,\n        top,\n        bottom,\n        left,\n        right,\n      };\n      gridArray.push({\n        tileNum: i,\n        color,\n        top,\n        bottom,\n        left,\n        right,\n      });\n    }\n\n    this.setState({ gridColors, gridArray });\n  }\n  render() {\n    let gameBoard;\n    let winText = null;\n    let tileHeight = Math.floor(420 / this.props.size);\n    let tileWidth = Math.floor(420 / this.props.size);\n    \n    if (this.state.gridArray) {\n      let splitArray = [];\n      let gridArrayCopy = JSON.parse(JSON.stringify(this.state.gridArray));\n      for (let i = 0; i < this.state.size; i++) {\n        splitArray.push(gridArrayCopy.splice(0, this.state.size));\n      }\n      gameBoard = splitArray.map((row) => {\n        let rowTiles = row.map((tile) => (\n          <Tile\n            crow={this.props.crow}\n            tileData={tile}\n            height={tileHeight}\n            width={tileWidth}\n            size={this.props.size}\n            colorCluster={this.state.colorCluster}\n          />\n        ));\n        return (\n          <div className=\"d-flex flex-row justify-content-center\">\n            {rowTiles}\n          </div>\n        );\n      });\n\n      // gameBoard = null;\n    } else {\n      gameBoard = null;\n    }\n    return (\n      <div>\n        <div>{gameBoard}</div>\n        {winText}\n      </div>\n    );\n  }\n}\n\nexport default Grid;\n","import React, { Component } from \"react\";\n\nclass ColorButtons extends Component {\n  render() {\n    if (this.props.crow) {\n      return (\n        <div\n          className=\"color-buttons cursor-pointer\"\n          style={{ height: 50, width: 50 }}\n          onClick={() => this.props.sendColor(this.props.color)}\n        >\n          <i\n            className=\"fas fa-crow\"\n            style={{\n              color: this.props.color,\n              fontSize: 50,\n            }}\n          ></i>\n        </div>\n      );\n    } else {\n      return (\n        <div\n          className=\"color-buttons cursor-pointer\"\n          style={{ backgroundColor: this.props.color, height: 50, width: 50 }}\n          onClick={() => this.props.sendColor(this.props.color)}\n        />\n      );\n    }\n  }\n}\n\nexport default ColorButtons;\n","// export const colorThemes = {\n//   standard: [\"#EAC435\", \"#345995\", \"#E40066\", \"#03CEA4\", \"#FB4D3D\"],\n//   sunset: [\"#FEB965\", \"#FE7F64\", \"#E7586D\", \"#714178\", \"#493465\"],\n//   ocean: [\"#A8D2DE\", \"#43BEC6\", \"#0197A6\", \"#04718E\", \"#02618E\"],\n//   pastel: [\"#ffb3ba\", \"#ffdfba\", \"#ffffba\", \"#baffc9\", \"#bbe1ff\"],\n// };\n\nexport const colorThemes = [\n  {\n    name: \"standard\",\n    colors: [\"#FFDB58\", \"#345995\", \"#E40066\", \"#03CEA4\", \"#FB4D3D\"],\n  },\n  {\n    name: \"sunset\",\n    colors: [\"#FEB965\", \"#FE7F64\", \"#E7586D\", \"#714178\", \"#493465\"],\n  },\n  {\n    name: \"ocean\",\n    colors: [\"#A8D2DE\", \"#43BEC6\", \"#0197A6\", \"#04718E\", \"#02618E\"],\n  },\n  {\n    name: \"pastel\",\n    colors: [\"#ffb3ba\", \"#ffdfba\", \"#ffffba\", \"#baffc9\", \"#bbe1ff\"],\n  },\n];\n\nexport default colorThemes;\n","import React, { Component } from \"react\";\nimport colorThemes from \"../constants/colorThemes\";\n\nclass Settings extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedColorTheme: this.props.colorTheme,\n      selectedGridSize: this.props.size,\n    };\n    this.applySettingsChanges = this.applySettingsChanges.bind(this);\n    this.updateGridSize = this.updateGridSize.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidUpdate(prevProps) {\n    let newSize;\n    let newTheme;\n    if (prevProps.size !== this.props.size) {\n      newSize = this.props.size;\n      this.setState({ selectedGridSize: newSize});\n    }\n    if (prevProps.colorTheme !== this.props.colorTheme) {\n      newTheme = this.props.colorTheme;\n      this.setState({ selectedColorTheme: newTheme });\n    }\n  }\n\n  applySettingsChanges() {\n    let settings = {\n      colorTheme: this.state.selectedColorTheme,\n      size: this.state.selectedGridSize,\n    };\n    this.props.applyNewSettings(settings);\n    this.props.closeSidedrawer();\n  }\n\n  updateGridSize(e) {\n    console.log(e.target.value);\n    this.setState({ selectedGridSize: Math.floor(e.target.value) });\n  }\n\n  handleChange(e) {\n    console.log(e.target);\n    console.log(e);\n  }\n\n  render() {\n    let themes = colorThemes.map((theme) => {\n      let colorSwatches = theme.colors.map((color) => {\n        return (\n          <div style={{ backgroundColor: color, height: 35, width: 35 }} />\n        );\n      });\n      return (\n        <div\n          className={`d-flex mb-3 color-swatch-bar color-swatch-bar--${\n            this.state.selectedColorTheme === theme.name ? \"border\" : null\n          }`}\n          onClick={() => this.setState({ selectedColorTheme: theme.name })}\n        >\n          {colorSwatches}\n        </div>\n      );\n    });\n    return (\n      <div>\n        <div className=\"d-flex justify-content-between mb-3\">\n          <h3>Manage Settings</h3>\n          <div>\n            <button\n              className={`btn btn-${\n                this.props.darkMode ? \"dark\" : \"light\"\n              } mr-2`}\n              onClick={this.props.closeSidedrawer}\n            >\n              Cancel\n            </button>\n            <button\n              className=\"btn btn-secondary\"\n              onClick={this.applySettingsChanges}\n            >\n              Apply\n            </button>\n          </div>\n        </div>\n        <div className=\"mb-3\">\n          *Current game will be lost when applying new settings\n        </div>\n        <h5>Color Themes</h5>\n        <div className=\"d-flex flex-column align-items-start mb-3\">\n          {themes}\n        </div>\n        <h5>{`Grid Size ${this.state.selectedGridSize} x ${this.state.selectedGridSize}`}</h5>\n        <div className=\"mb-3\">\n          <input\n            className=\"width-70\"\n            type=\"number\"\n            onKeyPress=\"return (event.charCode == 8 || event.charCode == 0) ? null : event.charCode >= 48 && event.charCode <= 57\"\n            name=\"tentacles\"\n            min=\"5\"\n            step=\"5\"\n            max=\"25\"\n            value={this.state.selectedGridSize}\n            onChange={this.updateGridSize}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Settings;\n","import React, { Component } from \"react\";\nimport Settings from \"./Settings\";\nclass Sidedrawer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isOpen: this.props.isOpen,\n      content: this.props.content,\n    };\n  }\n  render() {\n    let showOverlay = null;\n    let sidedrawerStatus = null;\n    if (this.props.isOpen) {\n      sidedrawerStatus = \"open\";\n    } else if (this.props.isOpen === false) {\n      sidedrawerStatus = \"closed\";\n    }\n    if (this.props.isOpen) {\n      showOverlay = (\n        <div\n          className=\"sidedrawer-overlay\"\n          onClick={this.props.closeSidedrawer}\n        ></div>\n      );\n    }\n    return (\n      <div>\n        <div\n          className={`sidedrawer sidedrawer--${sidedrawerStatus} sidedrawer-dark-mode--${this.props.darkMode} pt-4 pb-4 pl-4 pr-4`}\n        >\n          <Settings\n            colorTheme={this.props.colorTheme}\n            applyNewSettings={this.props.applyNewSettings}\n            closeSidedrawer={this.props.closeSidedrawer}\n            size={this.props.size}\n            darkMode={this.props.darkMode}\n            applyMode={this.props.applyMode}\n          />\n        </div>\n        {showOverlay}\n      </div>\n    );\n  }\n}\n\nexport default Sidedrawer;\n","import React, { Component } from \"react\";\nimport Grid from \"../components/Grid\";\nimport ColorButtons from \"../components/ColorButtons\";\nimport Sidedrawer from \"../components/Sidedrawer\";\nimport colorThemes from \"../constants/colorThemes\";\n\nclass GameContainer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      currentColor: null,\n      crow: false,\n      sidedrawerIsOpen: null,\n      content: \"hi\",\n      theme: colorThemes[0],\n      size: 5,\n      darkMode: false,\n      refresh: false,\n      winStats: null,\n      totalClicks: 0,\n      best: {},\n    };\n    this.colorClicked = this.colorClicked.bind(this);\n    this.closeSidedrawer = this.closeSidedrawer.bind(this);\n    this.applyNewSettings = this.applyNewSettings.bind(this);\n    this.applyMode = this.applyMode.bind(this);\n    this.showWin = this.showWin.bind(this);\n    this.startNewGame = this.startNewGame.bind(this);\n  }\n\n  componentDidMount() {\n    let currentSettings;\n    if (localStorage.getItem(\"floodItSettings\")) {\n      currentSettings = JSON.parse(localStorage.getItem(\"floodItSettings\"));\n      const { theme, size, crow, darkMode, best } = currentSettings;\n      this.setState({\n        theme,\n        size,\n        crow,\n        darkMode,\n        best,\n      });\n    } else {\n      currentSettings = {\n        theme: colorThemes[0],\n        size: 5,\n        crow: false,\n        darkMode: false,\n        best: {},\n      };\n      localStorage.setItem(\"floodItSettings\", JSON.stringify(currentSettings));\n    }\n  }\n\n  showWin() {\n    const { size, best, totalClicks } = this.state;\n    let updateBest = JSON.parse(localStorage.getItem(\"floodItSettings\"));\n    let historicBest = updateBest.best[size];\n    let bestGame = {};\n    let bestClicks = 0;\n    if (!best[size] || totalClicks <= best[size]) {\n      if (totalClicks < historicBest) {\n        bestGame[size] = totalClicks;\n      } else {\n        bestGame[size] = historicBest;\n      }\n      bestClicks = totalClicks;\n    } else {\n      bestGame[size] = best[size];\n      bestClicks = best[size];\n    }\n    if (updateBest.best[size] < bestClicks) {\n    } else {\n      updateBest.best[size] = bestClicks;\n      localStorage.setItem(\"floodItSettings\", JSON.stringify(updateBest));\n    }\n    this.setState({\n      winStats: {\n        message: \"Flooded!\",\n        steps: totalClicks,\n        best: bestGame[size],\n      },\n      best: bestGame,\n    });\n  }\n\n  colorClicked(color) {\n    if (!this.state.winStats) {\n      let totalClicks = this.state.totalClicks + 1;\n      this.setState({ currentColor: color, totalClicks });\n    }\n  }\n\n  startNewGame() {\n    this.setState(\n      { refresh: !this.state.refresh, winStats: null, totalClicks: 0 },\n      () => this.setState({ refresh: !this.state.refresh })\n    );\n  }\n\n  startNewGameConfirmation() {}\n\n  closeSidedrawer() {\n    this.setState({ sidedrawerIsOpen: false });\n  }\n\n  applyNewSettings(settings) {\n    let newColorTheme = colorThemes.find(\n      (color) => color.name === settings.colorTheme\n    );\n    this.setState({\n      theme: newColorTheme,\n      currentColor: null,\n      size: settings.size,\n      totalClicks: 0,\n      winStats: null,\n    });\n    let currentStorage = JSON.parse(localStorage.getItem(\"floodItSettings\"));\n    currentStorage.theme = newColorTheme;\n    currentStorage.size = settings.size;\n    localStorage.setItem(\"floodItSettings\", JSON.stringify(currentStorage));\n  }\n\n  applyMode(mode) {\n    this.setState({\n      darkMode: mode,\n    });\n  }\n\n  render() {\n    let buttonSection;\n    buttonSection = this.state.theme.colors.map((color) => {\n      return (\n        <ColorButtons\n          color={color}\n          sendColor={this.colorClicked}\n          crow={this.state.crow}\n        />\n      );\n    });\n    let storageBestStatsObj = JSON.parse(\n      localStorage.getItem(\"floodItSettings\")\n    );\n    let storageBestStatsArr = [];\n    let historicStats = <div/>;\n    if (storageBestStatsObj && storageBestStatsObj.best) {\n      for (let key in storageBestStatsObj.best) {\n        storageBestStatsArr.push({\n          size: key,\n          value: storageBestStatsObj.best[key],\n        });\n      }\n      historicStats = storageBestStatsArr.map((stat) => {\n        let boldFont = false;\n        if (parseInt(stat.size) === this.state.size) {\n          boldFont = true;\n        }\n        return (\n          <div\n            className={`mb-2 font-20 d-flex justify-content-center bold--${boldFont}`}\n          >\n            {stat.size}x{stat.size} Grid:{\" \"}\n            <div className={`win-stat-number ml-3 bold--${boldFont}`}>\n              {stat.value}\n            </div>\n          </div>\n        );\n      });\n    }\n    \n    let navBarColor = this.state.darkMode\n      ? this.state.theme.colors[this.state.theme.colors.length - 1]\n      : this.state.theme.colors[0];\n    let stats = this.state.winStats ? (\n      <div className=\"mt-5 width-420\">\n        <div\n          className={`text-align-center win-box--${this.state.darkMode} p-5`}\n        >\n          <h5 className=\"mb-5 font-25\">\n            <strong>{this.state.winStats.message}</strong>\n          </h5>\n          <div className=\"mb-3 font-20 d-flex justify-content-center bold--true\">\n            <strong>Steps Taken: </strong>\n            <div className=\"win-stat-number ml-3\">\n              {this.state.winStats.steps}\n            </div>\n          </div>\n          <div className=\"mb-2 font-20\">\n            <strong>Best Game:</strong>\n          </div>\n          {historicStats}\n          <button\n            className=\"btn btn-secondary mt-3\"\n            onClick={this.startNewGame}\n          >\n            New Game?\n          </button>\n        </div>\n      </div>\n    ) : null;\n    return (\n      <div className={`wrapper dark-mode--${this.state.darkMode}`}>\n        <nav\n          className=\"navbar navbar-expand-lg navbar-light mb-3\"\n          style={{ backgroundColor: navBarColor }}\n        >\n          <h1>Flood It!</h1>\n          <button\n            className=\"navbar-toggler\"\n            type=\"button\"\n            data-toggle=\"collapse\"\n            data-target=\"#navbarNavDropdown\"\n            aria-controls=\"navbarNavDropdown\"\n            aria-expanded=\"false\"\n            aria-label=\"Toggle navigation\"\n          >\n            <span className=\"navbar-toggler-icon\"></span>\n          </button>\n          <div\n            className=\"collapse navbar-collapse flex-row-reverse\"\n            id=\"navbarNavDropdown\"\n          >\n            <ul className=\"navbar-nav\">\n              <li className=\"nav-item active ml-3\">\n                <i\n                  title=\"How To Play\"\n                  className=\"fas fa-question font-25 cursor-pointer\"\n                  data-toggle=\"modal\"\n                  data-target=\"#instructionsModal\"\n                ></i>\n              </li>\n              <li className=\"nav-item active ml-3\">\n                <i\n                  title={this.state.darkMode ? \"Dark Mode\" : \"Light Mode\"}\n                  className={`fas fa-${\n                    this.state.darkMode ? \"moon\" : \"sun\"\n                  } font-25 rainbow cursor-pointer`}\n                  onClick={() => {\n                    let currentStorage = JSON.parse(\n                      localStorage.getItem(\"floodItSettings\")\n                    );\n                    currentStorage.darkMode = !this.state.darkMode;\n                    localStorage.setItem(\n                      \"floodItSettings\",\n                      JSON.stringify(currentStorage)\n                    );\n                    this.setState({ darkMode: !this.state.darkMode });\n                  }}\n                ></i>\n              </li>\n              <li className=\"nav-item active ml-3\">\n                <i\n                  title={this.state.crow ? \"Block Mode!\" : \"CAW!\"}\n                  className={`fas fa-${\n                    this.state.crow ? \"square\" : \"crow\"\n                  } font-25 rainbow cursor-pointer`}\n                  onClick={() => {\n                    let currentStorage = JSON.parse(\n                      localStorage.getItem(\"floodItSettings\")\n                    );\n                    currentStorage.crow = !this.state.crow;\n                    localStorage.setItem(\n                      \"floodItSettings\",\n                      JSON.stringify(currentStorage)\n                    );\n                    this.setState({ crow: !this.state.crow });\n                  }}\n                ></i>\n              </li>\n              <li className=\"nav-item active ml-3\">\n                <i\n                  title=\"Settings\"\n                  className=\"fas fa-cog font-25 cursor-pointer\"\n                  onClick={() =>\n                    this.setState({\n                      sidedrawerIsOpen: !this.state.sidedrawerIsOpen,\n                    })\n                  }\n                ></i>\n              </li>\n            </ul>\n          </div>\n        </nav>\n        <div className=\"page-body pt-2 pb-3 d-flex justify-content-around\">\n          <div>\n            <div className=\"d-flex justify-content-between font-1_5 width-420\">\n              <div></div>\n              <div>Steps: {this.state.totalClicks}</div>\n              {!this.state.winStats ? (\n                <div>\n                  <i\n                    title=\"New Game\"\n                    className=\"fas fa-redo font-1_25 cursor-pointer\"\n                    data-toggle=\"modal\"\n                    data-target=\"#exampleModal\"\n                  ></i>\n                </div>\n              ) : (\n                <div />\n              )}\n            </div>\n            <Grid\n              size={this.state.size}\n              crow={this.state.crow}\n              colors={this.state.theme.colors}\n              currentColor={this.state.currentColor}\n              refresh={this.state.refresh}\n              showWin={this.showWin}\n            />\n            <div className=\"d-flex justify-content-center mt-5\">\n              {buttonSection}\n            </div>\n          </div>\n          {stats}\n        </div>\n        <footer className=\"footer text-align-center\">\n          &copy; Cynthia Lu {new Date().getFullYear()}\n        </footer>\n        <Sidedrawer\n          isOpen={this.state.sidedrawerIsOpen}\n          closeSidedrawer={this.closeSidedrawer}\n          colorTheme={this.state.theme.name}\n          applyNewSettings={this.applyNewSettings}\n          size={this.state.size}\n          darkMode={this.state.darkMode}\n          applyMode={this.applyMode}\n        />\n        <div\n          className=\"modal fade\"\n          id=\"exampleModal\"\n          tabindex=\"-1\"\n          role=\"dialog\"\n          aria-labelledby=\"exampleModalLabel\"\n          aria-hidden=\"true\"\n        >\n          <div className=\"modal-dialog modal-dialog-centered\" role=\"document\">\n            <div\n              className={`modal-content dark-mode--${\n                this.state.darkMode ? \"true\" : \"false\"\n              }`}\n            >\n              <div className=\"modal-header\">\n                <h5 className=\"modal-title\" id=\"exampleModalLabel\">\n                  Start New Game?\n                </h5>\n                <button\n                  type=\"button\"\n                  className=\"close\"\n                  data-dismiss=\"modal\"\n                  aria-label=\"Close\"\n                >\n                  <span aria-hidden=\"true\">&times;</span>\n                </button>\n              </div>\n              <div className=\"modal-body\">Current game will be lost.</div>\n              <div className=\"modal-footer\">\n                <button\n                  type=\"button\"\n                  className=\"btn btn-light\"\n                  data-dismiss=\"modal\"\n                >\n                  Cancel\n                </button>\n                <button\n                  type=\"button\"\n                  data-dismiss=\"modal\"\n                  className=\"btn btn-secondary\"\n                  onClick={this.startNewGame}\n                >\n                  Accept\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div\n          className=\"modal fade\"\n          id=\"instructionsModal\"\n          tabindex=\"-1\"\n          role=\"dialog\"\n          aria-labelledby=\"instructionsModal\"\n          aria-hidden=\"true\"\n        >\n          <div className=\"modal-dialog modal-dialog-centered\" role=\"document\">\n            <div\n              className={`modal-content dark-mode--${\n                this.state.darkMode ? \"true\" : \"false\"\n              }`}\n            >\n              <div className=\"modal-header\">\n                <h5 className=\"modal-title\" id=\"instructionsModalLabel\">\n                  How To Play\n                </h5>\n                <button\n                  type=\"button\"\n                  className=\"close\"\n                  data-dismiss=\"modal\"\n                  aria-label=\"Close\"\n                >\n                  <span aria-hidden=\"true\">&times;</span>\n                </button>\n              </div>\n              <div className=\"modal-body\">\n                <ul>\n                  <li>\n                    This is a copycat of the game of the same name 'Flood It!'\n                  </li>\n                  <li>\n                    The goal is to 'flood' the board with 1 color, starting from\n                    the top left corner\n                  </li>\n                  <li>\n                    Click on the 5 color buttons below the grid to change the\n                    color of the starting square\n                  </li>\n                  <li>\n                    Same colors adjacent to the starting square will become part\n                    of the 'flood'\n                  </li>\n                  <li>Keep changing colors until the board is flooded!</li>\n                </ul>\n              </div>\n              {/* <div className=\"modal-footer\">\n                <button\n                  type=\"button\"\n                  className=\"btn btn-light\"\n                  data-dismiss=\"modal\"\n                >\n                  Cancel\n                </button>\n                <button\n                  type=\"button\"\n                  data-dismiss=\"modal\"\n                  className=\"btn btn-secondary\"\n                  onClick={this.startNewGame}\n                >\n                  Accept\n                </button>\n              </div> */}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default GameContainer;\n","import React from 'react';\nimport GameContainer from './containers/GameContainer';\nrequire('./styles.css')\nfunction App() {\n  return (\n    <div className=\"App\">\n      <GameContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}